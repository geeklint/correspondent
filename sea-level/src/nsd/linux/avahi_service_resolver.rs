// This code was autogenerated with `dbus-codegen-rust -c nonblock -m None`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for nonblock::Proxy<'a, C> {

    fn introspect(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopAvahiServiceResolver {
    fn free(&self) -> nonblock::MethodReply<()>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopAvahiServiceResolver for nonblock::Proxy<'a, C> {

    fn free(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.Avahi.ServiceResolver", "Free", ())
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopAvahiServiceResolverFound {
    pub interface: i32,
    pub protocol: i32,
    pub name: String,
    pub type_: String,
    pub domain: String,
    pub host: String,
    pub aprotocol: i32,
    pub address: String,
    pub port: u16,
    pub txt: Vec<Vec<u8>>,
    pub flags: u32,
}

impl arg::AppendAll for OrgFreedesktopAvahiServiceResolverFound {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface, i);
        arg::RefArg::append(&self.protocol, i);
        arg::RefArg::append(&self.name, i);
        arg::RefArg::append(&self.type_, i);
        arg::RefArg::append(&self.domain, i);
        arg::RefArg::append(&self.host, i);
        arg::RefArg::append(&self.aprotocol, i);
        arg::RefArg::append(&self.address, i);
        arg::RefArg::append(&self.port, i);
        arg::RefArg::append(&self.txt, i);
        arg::RefArg::append(&self.flags, i);
    }
}

impl arg::ReadAll for OrgFreedesktopAvahiServiceResolverFound {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopAvahiServiceResolverFound {
            interface: i.read()?,
            protocol: i.read()?,
            name: i.read()?,
            type_: i.read()?,
            domain: i.read()?,
            host: i.read()?,
            aprotocol: i.read()?,
            address: i.read()?,
            port: i.read()?,
            txt: i.read()?,
            flags: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopAvahiServiceResolverFound {
    const NAME: &'static str = "Found";
    const INTERFACE: &'static str = "org.freedesktop.Avahi.ServiceResolver";
}

#[derive(Debug)]
pub struct OrgFreedesktopAvahiServiceResolverFailure {
    pub error: String,
}

impl arg::AppendAll for OrgFreedesktopAvahiServiceResolverFailure {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.error, i);
    }
}

impl arg::ReadAll for OrgFreedesktopAvahiServiceResolverFailure {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopAvahiServiceResolverFailure {
            error: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopAvahiServiceResolverFailure {
    const NAME: &'static str = "Failure";
    const INTERFACE: &'static str = "org.freedesktop.Avahi.ServiceResolver";
}
